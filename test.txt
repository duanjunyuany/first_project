Git是一个开源的分布式版本控制系统
Git快照是在原有文件版本基础上重新生成一份新文件，类似备份，这样切换版本非常快，同时也占用磁盘空间
Git中的三个区域：工作区，暂存区，仓库
Git中的三种状态：已修改modified 已暂存staged 已提交committed 
首先配置用户名和邮箱
git config --global user.name "duanjunyuan"
git config --global user.email "3164005225@qq.com"
--global参数表示这台电脑上的所有Git仓库都会使用这个配置，只需运行一次就可永久生效
配置的用户名和邮箱会被写入C:/Users/31640/.gitconfig文件中
查看用户名
git config user.name
查看邮箱
git config user.email
获取帮助信息
git help config
获取Git仓库的两种方式
将本地目录转换为Git仓库
从其它服务器克隆一个已存在的Git仓库
在现有目录中初始化仓库
在项目目录中，打开Git Bash
git init
会创建一个.git的隐藏目录，就是当前项目的Git仓库，里面包含了初始文件
工作区中文件的4种状态
两类：未被Git管理  已被Git管理
未被Git管理：未跟踪Untracked
已被Git管理：未修改Unmodified：工作区中文件和Git仓库文件内容一致
已修改Modified：工作区中文件和Git仓库内容不一致
已暂存Staged： 工作区中被修改的文件已放到暂存区，准备保存到Git仓库中
Git操作的最终结果：让工作区的文件都处于“未修改”状态
跟踪新文件
git add index.html
再运行git status，查看文件的状态，此时文件已被跟踪，处于暂存状态
git status -s 精简方式显示文件的状态，暂存区文件前面有绿色的A标记
提交文件
暂存区有一个test.txt文件等待被提交
git commit进行提交
git commit -m "新建了test.txt文件"
提交之后再次检查文件的状态

对已提交的文件修改
目前GitTest和text.txt已经被Git跟踪，并且提交到Git仓库，所以工作区和仓库里的文件一致
当修改了工作区的文件之后，再次运行git status或git status -s命令
会发现文件出现在Changes not staged for commit下面，表示文件内容发生变化，但还没放到暂存区
修改过的，没有放入暂存区的文件前面有红色的M标记
暂存已修改的文件
工作区的文件已被修改，如果要放到暂存区，再次运行git add
git add命令的作用：
可以开始跟踪新文件
把已跟踪，且修改过的文件放到暂存区
把有冲突的文件标记为已解决状态
git status -s 精简的文件状态报告，绿色的M表示文件已修改并已放入暂存区

提交已暂存的文件
再次运行git commit -m ""即可提交到仓库保存
撤销对文件的修改
把对工作区中文件的修改，还原成仓库中保存的版本，这样所有的修改会丢失
本质就是用仓库保存的文件覆盖工作区的文件
查看修改的内容
git diff index.html
一次性添加多个文件
git add .
开发中常用，将新增的和修改后的文件加入暂存区
取消暂存文件
git reset HEAD index.html

查看提交历史
git log
回退到指定版本
打印出提交日志后，可以回退指定版本
Git中用HEAD表示当前版本，上一个版本是HEAD^
回退到上一个版本
git reset --hard HEAD^
回退之后，最新的版本就没了，也可以通过指定版本号回退或回到未来的版本
git reset --hard 1094a  (版本号写前几位就行)
HEAD指向当前版本，Git允许在版本历史之间穿梭，git reset --hard commit_id
回退前，用git log查看历史
要重返未来，用git reflog查看命令历史，找到未来的那个版本号

从Git仓库中移除文件
从Git仓库和工作区中同时移除文件
git rm -f index.html
只从Git仓库移除文件，但保留工作区中的文件
git rm --cached index.html